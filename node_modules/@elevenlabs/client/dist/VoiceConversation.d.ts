import { Input } from "./utils/input";
import { Output } from "./utils/output";
import { Connection } from "./utils/connection";
import { AgentAudioEvent, InterruptionEvent } from "./utils/events";
import { BaseConversation, Options, PartialOptions } from "./BaseConversation";
export declare class VoiceConversation extends BaseConversation {
    readonly input: Input;
    readonly output: Output;
    wakeLock: WakeLockSentinel | null;
    static startSession(options: PartialOptions): Promise<VoiceConversation>;
    private inputFrequencyData?;
    private outputFrequencyData?;
    protected constructor(options: Options, connection: Connection, input: Input, output: Output, wakeLock: WakeLockSentinel | null);
    protected handleEndSession(): Promise<void>;
    protected handleInterruption(event: InterruptionEvent): void;
    protected handleAudio(event: AgentAudioEvent): void;
    private onInputWorkletMessage;
    private onOutputWorkletMessage;
    private addAudioBase64Chunk;
    private fadeOutAudio;
    private calculateVolume;
    setMicMuted(isMuted: boolean): void;
    getInputByteFrequencyData(): Uint8Array;
    getOutputByteFrequencyData(): Uint8Array;
    getInputVolume(): number;
    getOutputVolume(): number;
}
